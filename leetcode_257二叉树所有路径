/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> ret_str;
        if(root == nullptr)
            return ret_str;
        
        if(root->left == nullptr && root->right == nullptr)
        {
            ret_str.push_back(to_string(root->val));
            return ret_str;
        }
        
        vector<string> left_str = binaryTreePaths(root->left);
        for(int i=0; i<left_str.size(); i++)
        {
            ret_str.push_back(to_string(root->val) + "->" + left_str[i]);
        }
        
        vector<string> right_str = binaryTreePaths(root->right);
        for(int i=0; i<right_str.size(); i++)
        {
            ret_str.push_back(to_string(root->val) + "->" + right_str[i]);
        }
        
        return ret_str;
    }
};
